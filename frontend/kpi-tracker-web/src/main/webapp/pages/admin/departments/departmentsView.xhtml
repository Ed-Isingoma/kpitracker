<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/pages/californiatemplate/template.xhtml">

    <ui:define name="title">Manage Departments</ui:define>
    <ui:define name="viewname">Departments</ui:define>

    <ui:define name="content">
        <style type="text/css">
            :root {
                --pahappa-blue: #2155A3;
                --pahappa-green: #6DBE46;
                --light-blue: #e3f2fd;
                --light-green: #f1f8e9;
                --gradient-primary: linear-gradient(135deg, var(--pahappa-blue), #1e4a8c);
                --gradient-secondary: linear-gradient(135deg, var(--pahappa-green), #5da83d);
                --shadow-soft: 0 4px 20px rgba(33, 85, 163, 0.08);
                --shadow-hover: 0 8px 32px rgba(33, 85, 163, 0.15);
                --border-radius: 12px;
                --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            }

            .departments-container {
                background: transparent;
                min-height: calc(100vh - 80px);
                padding: 2rem 0;
            }

            .content-wrapper {
                max-width: 1400px;
                margin: 0 auto;
                padding: 0 1.5rem;
            }

            .page-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 2.5rem;
                background: transparent;
                padding: 2rem;
                border-radius: var(--border-radius);
                box-shadow: var(--shadow-soft);
                position: relative;
                overflow: hidden;
            }

            .page-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: var(--gradient-primary);
            }

            .page-title {
                font-size: 2rem;
                font-weight: 700;
                color: var(--pahappa-blue);
                margin-bottom: 0.25rem;
                background: var(--gradient-primary);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }

            .page-subtitle {
                color: #64748b;
                font-size: 1rem;
                font-weight: 500;
            }

            .header-actions {
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .search-container {
                position: relative;
            }

            .search-container .ui-inputtext {
                padding: 0.75rem 1rem 0.75rem 2.5rem;
                border: 2px solid #e2e8f0;
                border-radius: 50px;
                font-size: 0.95rem;
                transition: var(--transition);
                width: 280px;
                background: white;
            }

            .search-container .ui-inputtext:focus {
                border-color: var(--pahappa-blue);
                box-shadow: 0 0 0 3px rgba(33, 85, 163, 0.1);
                outline: none;
            }

            .search-container .pi-search {
                position: absolute;
                left: 1rem;
                top: 50%;
                transform: translateY(-50%);
                color: #94a3b8;
                z-index: 2;
            }

            .add-department-btn {
                background: var(--gradient-primary) !important;
                border: none !important;
                padding: 0.75rem 1.5rem !important;
                border-radius: 50px !important;
                font-weight: 600 !important;
                font-size: 0.95rem !important;
                transition: var(--transition) !important;
                box-shadow: var(--shadow-soft) !important;
            }

            .add-department-btn:hover {
                transform: translateY(-2px) !important;
                box-shadow: var(--shadow-hover) !important;
            }

            .department-grid-container {
                margin-top: 1rem;
            }

            .department-grid-container .ui-dataview-content {
                border: none;
                background: transparent;
                padding: 0;
            }

            .department-card {
                background: transparent;
                border-radius: var(--border-radius);
                box-shadow: var(--shadow-soft);
                transition: var(--transition);
                position: relative;
                margin-bottom: 1.5rem;
                overflow: hidden;
                height: 100%;
                border: 1px solid #f1f5f9;
            }

            .department-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: var(--gradient-secondary);
                opacity: 0;
                transition: var(--transition);
            }

            .department-card:hover {
                transform: translateY(-8px);
                box-shadow: var(--shadow-hover);
                border-color: var(--pahappa-green);
            }

            .department-card:hover::before {
                opacity: 1;
            }

            .card-content {
                padding: 2rem 1.5rem 1.5rem;
                position: relative;
            }

            .card-icon {
                position: absolute;
                top: 1.5rem;
                right: 1.5rem;
                width: 48px;
                height: 48px;
                background: var(--light-blue);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--pahappa-blue);
                font-size: 1.2rem;
            }

            .card-header-text {
                font-size: 1.3rem;
                font-weight: 700;
                color: #1e293b;
                margin-bottom: 1rem;
                line-height: 1.3;
                padding-right: 60px;
            }

            .card-meta-container {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
                margin-bottom: 1.5rem;
            }

            .card-meta-item {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.5rem;
                background: #f8fafc;
                border-radius: 8px;
                transition: var(--transition);
            }

            .card-meta-item:hover {
                background: var(--light-blue);
            }

            .card-meta-icon {
                width: 32px;
                height: 32px;
                background: var(--gradient-primary);
                border-radius: 6px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 0.85rem;
                flex-shrink: 0;
            }

            .card-meta-text {
                font-size: 0.9rem;
                color: #475569;
                font-weight: 500;
                margin: 0;
            }

            .card-actions {
                border-top: 1px solid #f1f5f9;
                padding: 1rem 1.5rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
                background: #fafbfc;
            }

            .card-edit-btn {
                background: var(--gradient-secondary) !important;
                border: none !important;
                color: white !important;
                padding: 0.5rem 1rem !important;
                border-radius: 6px !important;
                font-weight: 600 !important;
                font-size: 0.85rem !important;
                transition: var(--transition) !important;
            }

            .card-edit-btn:hover {
                transform: translateY(-1px) !important;
                box-shadow: 0 4px 12px rgba(109, 190, 70, 0.3) !important;
            }

            .card-delete-btn {
                background: linear-gradient(135deg, #ef4444, #dc2626) !important;
                border: none !important;
                padding: 0.5rem !important;
                border-radius: 6px !important;
                transition: var(--transition) !important;
                width: 36px !important;
                height: 36px !important;
            }

            .card-delete-btn:hover {
                transform: translateY(-1px) !important;
                box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3) !important;
            }

            .card-link-overlay {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 65px;
                z-index: 1;
            }

            .department-stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 1.5rem;
                margin-bottom: 2rem;
            }

            .stat-card {
                background: white;
                padding: 1.5rem;
                border-radius: var(--border-radius);
                box-shadow: var(--shadow-soft);
                display: flex;
                align-items: center;
                gap: 1rem;
                transition: var(--transition);
            }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow-hover);
            }

            .stat-icon {
                width: 48px;
                height: 48px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
                color: white;
            }

            .stat-icon.total { background: var(--gradient-primary); }
            .stat-icon.active { background: var(--gradient-secondary); }

            .stat-content h3 {
                font-size: 1.5rem;
                font-weight: 700;
                margin: 0 0 0.25rem 0;
                color: #1e293b;
            }

            .stat-content p {
                font-size: 0.9rem;
                color: #64748b;
                margin: 0;
                font-weight: 500;
            }

            .empty-state {
                text-align: center;
                padding: 4rem 2rem;
                background: white;
                border-radius: var(--border-radius);
                box-shadow: var(--shadow-soft);
            }

            .empty-state-icon {
                width: 80px;
                height: 80px;
                background: var(--light-blue);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0 auto 1.5rem;
                color: var(--pahappa-blue);
                font-size: 2rem;
            }

            .empty-state h3 {
                font-size: 1.3rem;
                font-weight: 600;
                color: #1e293b;
                margin-bottom: 0.5rem;
            }

            .empty-state p {
                color: #64748b;
                font-size: 1rem;
            }

            /* Loading Animation */
            .loading-skeleton {
                background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
                background-size: 200% 100%;
                animation: loading 1.5s infinite;
            }

            @keyframes loading {
                0% { background-position: 200% 0; }
                100% { background-position: -200% 0; }
            }

            /* Responsive Design */
            @media (max-width: 768px) {
                .page-header {
                    flex-direction: column;
                    align-items: stretch;
                    gap: 1.5rem;
                }

                .header-actions {
                    justify-content: center;
                }

                .search-container .ui-inputtext {
                    width: 100%;
                }

                .card-content {
                    padding: 1.5rem 1rem;
                }

                .card-icon {
                    position: static;
                    margin-bottom: 1rem;
                }

                .card-header-text {
                    padding-right: 0;
                }
            }

            /* Animation Classes */
            .fade-in {
                animation: fadeIn 0.6s ease-out;
            }

            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }
        </style>

        <div class="departments-container">
            <div class="content-wrapper">
                <h:form id="departmentsForm">
                    <p:growl id="growl" showDetail="true" />

                    <div class="page-header fade-in">
                        <div>
                            <div class="page-title">Departments</div>
                            <div class="page-subtitle">Manage all company departments and teams</div>
                        </div>
                        <div class="header-actions">
                            <div class="search-container">
                                <i class="pi pi-search" />
                                <p:inputText value="#{departmentsView.searchTerm}"
                                             placeholder="Search departments..."
                                             styleClass="search-input">
                                    <p:ajax event="keyup" update="departmentsDataView" />
                                </p:inputText>
                            </div>
                            <p:commandButton value="Add Department"
                                             icon="pi pi-plus"
                                             process="@this"
                                             styleClass="add-department-btn"
                                             actionListener="#{departmentFormDialog.resetModal()}"
                                             oncomplete="PF('departmentFormDialogWidget').show()"
                                             update=":departmentForm"/>
                        </div>
                    </div>

                    <div class="department-stats fade-in">
                        <div class="stat-card">
                            <div class="stat-icon total">
                                <i class="pi pi-building"></i>
                            </div>
                            <div class="stat-content">
                                <h3 id="totalDepartments">0</h3>
                                <p>Total Departments</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon active">
                                <i class="pi pi-users"></i>
                            </div>
                            <div class="stat-content">
                                <h3 id="totalEmployees">0</h3>
                                <p>Total Employees</p>
                            </div>
                        </div>
                    </div>

                    <p:dataView id="departmentsDataView"
                                var="department"
                                value="#{departmentsView}"
                                lazy="true"
                                layout="grid"
                                gridIcon="pi pi-th-large"
                                listIcon="pi pi-bars"
                                paginator="true"
                                rows="#{departmentsView.maximumresultsPerpage}"
                                paginatorPosition="bottom"
                                emptyMessage="No departments found."
                                styleClass="department-grid-container">

                        <p:dataViewGridItem>
                            <div class="p-col-12 p-md-6 p-lg-4">
                                <div class="department-card fade-in">
                                    <div class="card-content">
                                        <div class="card-icon">
                                            <i class="pi pi-building"></i>
                                        </div>
                                        <div class="card-header-text">#{department.name}</div>
                                        <div class="card-meta-container">
                                            <div class="card-meta-item">
                                                <div class="card-meta-icon">
                                                    <i class="pi pi-users"></i>
                                                </div>
                                                <div class="card-meta-text">12 Employees</div> <!-- Placeholder -->
                                            </div>
                                            <div class="card-meta-item">
                                                <div class="card-meta-icon">
                                                    <i class="pi pi-user"></i>
                                                </div>
                                                <div class="card-meta-text">
                                                    Lead: #{department.departmentLead != null ? department.departmentLead.fullName : 'Not Assigned'}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-actions">
                                        <p:commandButton value="Edit Department"
                                                         styleClass="card-edit-btn"
                                                         actionListener="#{departmentsView.departmentFormDialog.setModel(department)}"
                                                         oncomplete="PF('departmentFormDialogWidget').show()"
                                                         update=":departmentForm"/>

                                        <p:commandButton icon="pi pi-trash"
                                                         title="Delete Department"
                                                         styleClass="card-delete-btn"
                                                         actionListener="#{departmentsView.deleteDepartment(department)}"
                                                         update="@form">
                                            <p:confirm header="Delete Confirmation"
                                                       message="Are you sure you want to delete this department? This action cannot be undone."
                                                       icon="pi pi-exclamation-triangle" />
                                        </p:commandButton>
                                    </div>
                                    <h:link outcome="/pages/admin/departments/departmentDetails.xhtml?faces-redirect=true"
                                            styleClass="card-link-overlay">
                                        <f:param name="id" value="#{department.id}"/>
                                    </h:link>
                                </div>
                            </div>
                        </p:dataViewGridItem>

                        <f:facet name="empty">
                            <div class="empty-state fade-in">
                                <div class="empty-state-icon">
                                    <i class="pi pi-building"></i>
                                </div>
                                <h3>No Departments Found</h3>
                                <p>Get started by creating your first department</p>
                            </div>
                        </f:facet>
                    </p:dataView>

                    <p:confirmDialog global="true" showEffect="fade" hideEffect="fade" responsive="true">
                        <p:commandButton value="Yes, Delete" type="button"
                                         styleClass="ui-confirmdialog-yes ui-button-danger"
                                         icon="pi pi-check" />
                        <p:commandButton value="Cancel" type="button"
                                         styleClass="ui-confirmdialog-no ui-button-secondary"
                                         icon="pi pi-times" />
                    </p:confirmDialog>
                </h:form>
            </div>
        </div>

        <script type="text/javascript">
            // Enhanced JavaScript functionality
            document.addEventListener('DOMContentLoaded', function() {
                // Initialize animations and interactions
                initializeDepartmentPage();
            });

            function initializeDepartmentPage() {
                // Add loading animation for better UX
                addLoadingAnimation();

                // Update statistics
                updateDepartmentStats();

                // Add smooth scrolling
                addSmoothScrolling();

                // Initialize tooltips
                initializeTooltips();

                // Add keyboard navigation
                addKeyboardNavigation();
            }

            function addLoadingAnimation() {
                const dataView = document.querySelector('[id$="departmentsDataView"]');
                if (dataView) {
                    const observer = new MutationObserver(function(mutations) {
                        mutations.forEach(function(mutation) {
                            if (mutation.type === 'childList') {
                                const newCards = mutation.target.querySelectorAll('.department-card:not(.animated)');
                                newCards.forEach((card, index) => {
                                    card.classList.add('animated');
                                    setTimeout(() => {
                                        card.style.opacity = '1';
                                        card.style.transform = 'translateY(0)';
                                    }, index * 100);
                                });
                            }
                        });
                    });
                    observer.observe(dataView, { childList: true, subtree: true });
                }
            }

            function updateDepartmentStats() {
                // Count departments
                setTimeout(() => {
                    const departmentCards = document.querySelectorAll('.department-card');
                    const totalDepartments = departmentCards.length;
                    const totalEmployeesElement = document.getElementById('totalEmployees');
                    const totalDepartmentsElement = document.getElementById('totalDepartments');

                    if (totalDepartmentsElement) {
                        animateNumber(totalDepartmentsElement, 0, totalDepartments, 1000);
                    }

                    // Calculate total employees (placeholder - you can enhance this)
                    let totalEmployees = totalDepartments * 12; // Assuming 12 employees per dept on average
                    if (totalEmployeesElement) {
                        animateNumber(totalEmployeesElement, 0, totalEmployees, 1500);
                    }
                }, 500);
            }

            function animateNumber(element, start, end, duration) {
                const startTime = performance.now();
                const animate = (currentTime) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const easeOutCubic = 1 - Math.pow(1 - progress, 3);
                    const current = Math.floor(start + (end - start) * easeOutCubic);
                    element.textContent = current;

                    if (!(progress >= 1)) {
                        requestAnimationFrame(animate);
                    }
                };
                requestAnimationFrame(animate);
            }

            function addSmoothScrolling() {
                document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                    anchor.addEventListener('click', function (e) {
                        e.preventDefault();
                        const target = document.querySelector(this.getAttribute('href'));
                        if (target) {
                            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        }
                    });
                });
            }

            function initializeTooltips() {
                const tooltipElements = document.querySelectorAll('[title]');
                tooltipElements.forEach(element => {
                    element.addEventListener('mouseenter', showTooltip);
                    element.addEventListener('mouseleave', hideTooltip);
                });
            }

            function showTooltip(event) {
                const element = event.target;
                const title = element.getAttribute('title');
                if (!title) return;

                const tooltip = document.createElement('div');
                tooltip.className = 'custom-tooltip';
                tooltip.textContent = title;
                tooltip.style.cssText = `
                    position: absolute;
                    background: #1e293b;
                    color: white;
                    padding: 0.5rem 0.75rem;
                    border-radius: 6px;
                    font-size: 0.875rem;
                    z-index: 1000;
                    pointer-events: none;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    transition: opacity 0.2s ease;
                `;

                document.body.appendChild(tooltip);
                element.removeAttribute('title');
                element.setAttribute('data-original-title', title);

                const updatePosition = (e) => {
                    tooltip.style.left = (e.pageX + 10) + 'px';
                    tooltip.style.top = (e.pageY - tooltip.offsetHeight - 10) + 'px';
                };

                element.addEventListener('mousemove', updatePosition);
                updatePosition(event);
            }

            function hideTooltip(event) {
                const element = event.target;
                const tooltip = document.querySelector('.custom-tooltip');
                if (tooltip) {
                    tooltip.remove();
                }

                const originalTitle = element.getAttribute('data-original-title');
                if (originalTitle) {
                    element.setAttribute('title', originalTitle);
                    element.removeAttribute('data-original-title');
                }
            }

            function addKeyboardNavigation() {
                document.addEventListener('keydown', function(e) {
                    // ESC key to close modals
                    if (e.key === 'Escape') {
                        const activeModal = document.querySelector('.ui-dialog:not(.ui-helper-hidden)');
                        if (activeModal) {
                            const closeButton = activeModal.querySelector('.ui-dialog-titlebar-close');
                            if (closeButton) closeButton.click();
                        }
                    }

                    // Ctrl+N for new department
                    if (e.ctrlKey &amp;&amp; e.key === 'n') {
                        e.preventDefault();
                        const addButton = document.querySelector('.add-department-btn');
                        if (addButton) addButton.click();
                    }
                });
            }

            // Enhanced search functionality
            function enhanceSearch() {
                const searchInput = document.querySelector('[id$="searchTerm"]');
                if (searchInput) {
                    let searchTimeout;
                    searchInput.addEventListener('input', function() {
                        clearTimeout(searchTimeout);
                        const searchContainer = this.closest('.search-container');
                        searchContainer.classList.add('searching');

                        searchTimeout = setTimeout(() => {
                            searchContainer.classList.remove('searching');
                        }, 500);
                    });
                }
            }

            // Add pulse effect to cards on data update
            function addPulseEffect() {
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.type === 'childList') {
                            const cards = document.querySelectorAll('.department-card');
                            cards.forEach(card => {
                                card.style.animation = 'pulse 0.6s ease-out';
                                setTimeout(() => {
                                    card.style.animation = '';
                                }, 600);
                            });
                        }
                    });
                });

                const dataViewContent = document.querySelector('.ui-dataview-content');
                if (dataViewContent) {
                    observer.observe(dataViewContent, { childList: true, subtree: true });
                }
            }

            // Initialize all enhancements
            setTimeout(() => {
                enhanceSearch();
                addPulseEffect();
            }, 1000);
        </script>

        <ui:include src="departmentForm.xhtml" />
    </ui:define>
</ui:composition>