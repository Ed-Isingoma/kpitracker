<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/pages/californiatemplate/template.xhtml">
    <f:metadata>
        <f:viewParam name="id" value="#{roleForm.modelId}" />
        <f:event type="preRenderView" listener="#{roleForm.pageLoadInit}" />
    </f:metadata>
    <ui:define name="title">#{roleForm.editing ? 'Edit Role' : 'Add Role'}</ui:define>
    <ui:define name="viewname">#{roleForm.editing ? 'Edit Role' : 'Add Role'}</ui:define>

    <ui:define name="content">
        <style>
            .role-form-container {
                background: transparent;
                border-radius: 4px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                padding: 0;
                overflow: hidden;
                animation: slideInUp 0.6s ease-out;
            }

            .role-form-header {
                background: linear-gradient(135deg, #2155A3, #1e4a94);
                color: white;
                padding: 30px;
                margin: 0;
                position: relative;
                overflow: hidden;
            }

            .role-form-header::before {
                content: '';
                position: absolute;
                top: 0;
                right: 0;
                width: 200px;
                height: 200px;
                background: rgba(109, 190, 70, 0.1);
                border-radius: 50%;
                transform: translate(50%, -50%);
            }

            .role-form-header h5 {
                margin: 0;
                font-size: 28px;
                font-weight: 600;
                position: relative;
                z-index: 2;
            }

            .role-form-body {
                padding: 40px;
            }

            .warning-banner {
                background: linear-gradient(135deg, #fff3cd, #ffeaa7);
                border: 1px solid #ffeaa7;
                border-radius: 12px;
                padding: 20px;
                margin-bottom: 30px;
                display: flex;
                align-items: center;
                animation: fadeInDown 0.5s ease-out;
            }

            .warning-banner .warning-icon {
                color: #856404;
                font-size: 24px;
                margin-right: 15px;
            }

            .warning-banner .warning-text {
                color: #856404;
                font-weight: 500;
                line-height: 1.5;
            }

            .form-section {
                margin-bottom: 40px;
            }

            .section-title {
                font-size: 20px;
                font-weight: 600;
                color: #2155A3;
                margin-bottom: 25px;
                padding-bottom: 10px;
                border-bottom: 2px solid #6DBE46;
                position: relative;
            }

            .section-title::after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 50px;
                height: 2px;
                background: #2155A3;
            }

            .custom-field {
                margin-bottom: 25px;
            }

            .custom-field label {
                color: #2155A3;
                font-weight: 600;
                margin-bottom: 8px;
                display: block;
                font-size: 14px;
            }

            .custom-field .ui-inputtext {
                border: 2px solid #e9ecef;
                border-radius: 10px;
                padding: 12px 16px;
                font-size: 14px;
                transition: all 0.3s ease;
                background: white;
            }

            .custom-field .ui-inputtext:focus {
                border-color: #2155A3;
                box-shadow: 0 0 0 3px rgba(33, 85, 163, 0.1);
                outline: none;
            }

            .custom-field .ui-inputtext:disabled {
                background: #f8f9fa;
                border-color: #dee2e6;
                color: #6c757d;
            }

            .permissions-container {
                background: rgba(109, 190, 70, 0.05);
                border-radius: 12px;
                padding: 30px;
                border: 1px solid rgba(109, 190, 70, 0.2);
            }


            /*----------------------------------------------------------------------------------------------*/

            .ui-helper-hidden-accessible {
                position: absolute !important;
                left: -9999px !important;
            }

            /* Checkbox container */
            .ui-selectmanycheckbox .ui-chkbox {
                display: inline-flex;
                align-items: center;
                margin-right: 20px;
                margin-top: 20px;
                margin-bottom: 20px;
            }

            .ui-selectmanycheckbox .ui-chkbox:hover {
                border-color: #6DBE46;
                box-shadow: 0 4px 12px rgba(109, 190, 70, 0.1);
                transform: translateY(-2px);
                transition: all 0.3s ease;
            }

            /* Wrapper for each permission item */
            .ui-selectmanycheckbox .ui-selectmanycheckbox-item {
                display: flex;
                align-items: center;
                margin: 0px 12px !important;
            }

            /* Checkbox box */
            .ui-selectmanycheckbox .ui-chkbox-box {
                width: 20px;
                height: 20px;
                border: 2px solid #2155A3 !important;
                border-radius: 4px;
                background: #fff !important;
                transition: all 0.2s ease-in-out;
                padding: 15px;
                cursor: pointer;
            }

            /* Checked state */
            .ui-selectmanycheckbox .ui-chkbox-box.ui-state-active {
                background: #26a407 !important;
                border-color: #2155A3 !important;
            }

            .ui-selectmanycheckbox .ui-chkbox-box.ui-state-active .ui-chkbox-icon {
                color: #fff !important;
                font-size: 14px;
                font-weight: bold;
            }

            /* Labels */
            .ui-selectmanycheckbox .ui-chkbox-label {
                color: #2155A3 !important;
                font-weight: 600;
                font-size: 14px;
                cursor: pointer;
                color: #2155A3;
                margin-left: 0 !important;
            }
            .ui-selectmanycheckbox .ui-chkbox-label:hover {
                color: #2155A3;
            }
            /*------------------------------------------------------------------------------------------------*/
            .action-buttons {
                display: flex;
                justify-content: flex-end;
                gap: 15px;
                padding-top: 30px;
                border-top: 1px solid #e9ecef;
                margin-top: 40px;
            }

            .ui-button.ui-button-success {
                background: linear-gradient(135deg, #6DBE46, #5aa83a);
                border: none;
                border-radius: 10px;
                padding: 12px 24px;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(109, 190, 70, 0.3);
            }

            .ui-button.ui-button-success:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(109, 190, 70, 0.4);
            }

            .ui-button.ui-button-outlined {
                background: transparent;
                border: 2px solid #2155A3;
                color: #2155A3;
                border-radius: 10px;
                padding: 12px 24px;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                transition: all 0.3s ease;
            }

            .ui-button.ui-button-outlined:hover {
                background: #2155A3;
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(33, 85, 163, 0.3);
            }

            /* Custom Error Messages */
            .ui-message {
                background: #f8d7da;
                border: 1px solid #f5c6cb;
                color: #721c24;
                border-radius: 8px;
                padding: 12px 16px;
                margin-top: 8px;
                font-size: 14px;
                animation: shake 0.5s ease-in-out;
            }

            .ui-message.ui-message-error {
                background: linear-gradient(135deg, #f8d7da, #f1aeb5);
                border-left: 4px solid #dc3545;
            }

            .ui-message-error-icon {
                color: #dc3545;
                margin-right: 8px;
            }

            /* Animations */
            @keyframes slideInUp {
                from {
                    transform: translateY(30px);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }

            @keyframes fadeInDown {
                from {
                    transform: translateY(-20px);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }

            @keyframes shake {
                0%, 20%, 40%, 60%, 80%, 100% { transform: translateX(0); }
                10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            }

            /* Responsive Design */
            @media (max-width: 768px) {
                .role-form-container {
                    margin: 10px;
                }

                .role-form-header, .role-form-body {
                    padding: 20px;
                }

                .ui-selectmanycheckbox {
                    grid-template-columns: 1fr;
                }

                .action-buttons {
                    flex-direction: column;
                }
            }

            /* Growl Messages Enhancement */
            .ui-growl {
                top: 20px !important;
                right: 20px !important;
            }

            .ui-growl .ui-growl-item {
                border-radius: 12px;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
                backdrop-filter: blur(10px);
            }
        </style>

        <script>
            function validateRoleForm() {
                let isValid = true;
                let errorMessages = [];

                // Get form elements
                const roleNameField = document.querySelector('[id$="roleName"]');
                const roleDescField = document.querySelector('[id$="roleDesc"]');

                // Clear previous error styling
                document.querySelectorAll('.field-error').forEach(el => {
                    el.classList.remove('field-error');
                });

                // Validate role name
                if (roleNameField &amp;&amp; roleNameField.value.trim() === '') {
                    errorMessages.push('Role name is required');
                    roleNameField.classList.add('field-error');
                    isValid = false;
                } else if (roleNameField &amp;&amp; /^\d+$/.test(roleNameField.value.trim())) {
                    errorMessages.push('Role name cannot be only numbers');
                    roleNameField.classList.add('field-error');
                    isValid = false;
                }

                // Validate description (if it has content, it shouldn't be only numbers)
                if (roleDescField &amp;&amp; roleDescField.value.trim() !== '' &amp;&amp; /^\d+$/.test(roleDescField.value.trim())) {
                    errorMessages.push('Description cannot be only numbers');
                    roleDescField.classList.add('field-error');
                    isValid = false;
                }

                // Add error styling to fields
                if (!isValid) {
                    document.querySelectorAll('.field-error').forEach(field => {
                        field.style.borderColor = '#dc3545';
                        field.style.boxShadow = '0 0 0 3px rgba(220, 53, 69, 0.1)';
                    });

                    // Show error messages in growl (if available)
                    errorMessages.forEach(message => {
                        console.error(message); // Fallback to console if growl is not available
                    });
                }

                return isValid;
            }

            // Add event listeners when document is ready
            document.addEventListener('DOMContentLoaded', function() {
                // Add real-time validation
                const roleNameField = document.querySelector('[id$="roleName"]');
                const roleDescField = document.querySelector('[id$="roleDesc"]');

                if (roleNameField) {
                    roleNameField.addEventListener('blur', function() {
                        this.classList.remove('field-error');
                        this.style.borderColor = '';
                        this.style.boxShadow = '';

                        if (this.value.trim() === '') {
                            this.classList.add('field-error');
                            this.style.borderColor = '#dc3545';
                            this.style.boxShadow = '0 0 0 3px rgba(220, 53, 69, 0.1)';
                        } else if (/^\d+$/.test(this.value.trim())) {
                            this.classList.add('field-error');
                            this.style.borderColor = '#dc3545';
                            this.style.boxShadow = '0 0 0 3px rgba(220, 53, 69, 0.1)';
                        }
                    });
                }

                if (roleDescField) {
                    roleDescField.addEventListener('blur', function() {
                        this.classList.remove('field-error');
                        this.style.borderColor = '';
                        this.style.boxShadow = '';

                        if (this.value.trim() !== '' &amp;&amp; /^\d+$/.test(this.value.trim())) {
                            this.classList.add('field-error');
                            this.style.borderColor = '#dc3545';
                            this.style.boxShadow = '0 0 0 3px rgba(220, 53, 69, 0.1)';
                        }
                    });
                }
            });
        </script>

        <h:form id="roleFormPage">
            <div class="role-form-container">
                <div class="role-form-header">
                    <h5>#{roleForm.editing ? 'Edit Role Details' : 'Create New Role'}</h5>
                </div>

                <div class="role-form-body">
                    <p:growl id="growl" showDetail="true" />

                    <!-- Warning Banner for Add Mode Only -->
                    <div class="warning-banner" style="display: #{roleForm.editing ? 'none' : 'flex'}">
                        <i class="pi pi-exclamation-triangle warning-icon"></i>
                        <div class="warning-text">
                            <strong>Important:</strong> Once created, the role name cannot be edited. Please ensure you enter the correct name before saving.
                        </div>
                    </div>

                    <div class="form-section">
                        <h6 class="section-title">Basic Information</h6>
                        <div class="p-grid p-fluid">
                            <div class="p-col-12 p-md-6">
                                <div class="custom-field">
                                    <p:outputLabel for="roleName" value="Role Name *" />
                                    <p:inputText id="roleName"
                                                 value="#{roleForm.model.name}"
                                                 required="true"
                                                 requiredMessage="Role name is required"
                                                 disabled="#{roleForm.editing}"
                                                 placeholder="Enter a unique role name" />
                                    <p:message for="roleName" />
                                </div>
                            </div>
                            <div class="p-col-12 p-md-6">
                                <div class="custom-field">
                                    <p:outputLabel for="roleDesc" value="Description" />
                                    <p:inputText id="roleDesc"
                                                 value="#{roleForm.model.description}"
                                                 placeholder="Brief description of the role" />
                                    <p:message for="roleDesc" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <h6 class="section-title">Permissions Management</h6>
                        <div class="permissions-container">
                            <p:selectManyCheckbox id="permissionsCheckbox"
                                                  value="#{roleForm.selectedPermissions}"
                                                  converter="permissionConverter"
                                                  layout="grid"
                                                  columns="3">
                                <f:selectItems value="#{roleForm.allPermissions}"
                                               var="permission"
                                               itemValue="#{permission}"
                                               itemLabel="#{permission.name}"/>
                            </p:selectManyCheckbox>
                        </div>
                    </div>

                    <div class="action-buttons">
                        <p:commandButton value="#{roleForm.editing ? 'Update Role' : 'Create Role'}"
                                         icon="pi pi-check"
                                         action="#{roleForm.save}"
                                         update="@form"
                                         styleClass="ui-button-success"
                                         validateClient="true"
                                         process="@form"
                                         onclick="return validateRoleForm();"/>
                        <p:button value="Cancel"
                                  icon="pi pi-times"
                                  outcome="#{roleForm.viewUrl}"
                                  styleClass="ui-button-outlined"/>
                    </div>
                </div>
            </div>
        </h:form>
    </ui:define>
</ui:composition>